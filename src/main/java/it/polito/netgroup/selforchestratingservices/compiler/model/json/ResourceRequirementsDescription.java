package it.polito.netgroup.selforchestratingservices.compiler.model.json;


import com.fasterxml.jackson.annotation.JsonProperty;

import it.polito.netgroup.selforchestratingservices.compiler.model.json.param.ParamDescription;

public class ResourceRequirementsDescription implements GenerateJavaClass
{
	@JsonProperty("template")
	public String template_name;

	@JsonProperty("type")
	public String type;
	@JsonProperty("remove_cost")
	public ParamDescription remove_cost;
	@JsonProperty("from")
	public ParamDescription from;
	@JsonProperty("to")
	public ParamDescription to;
	
	@Override
	public String getJavaClassName(String prefix)
	{
		String className = prefix+type;
		return Character.toUpperCase(className.charAt(0)) + className.substring(1) +"ResourceRequirement";
	}
	
	@Override
	public String getJavaClass(String prefix, SelfOrchestratorModel model, String pack) {
		ResourceTemplateDescription template = model.getTemplateByName(template_name);

		//TODO
		String java = "package it.polito.netgroup.selforchestratingservices.auto;\n" +
				"\n" +
				PackageGenerator.getPackage() +
				"\n" +
				"//Autogenerated file\n" +
				"public class " + getJavaClassName(prefix) + " implements ResourceRequirement\n" +
				"{\n" +
				"\tVariables var;\n" +
				"\t\n" +
				"\tpublic " + getJavaClassName(prefix) + "(Variables var)\n" +
				"\t{\n" +
				"\t\tthis.var = var;\n" +
				"\t}\n" +
				"\t\n" +
				"\t@Override\n" +
				"\tpublic Class getResourceClass() {\n" +
				"\t\treturn " + type + ".class;\n" +
				"\t}\n" +
				"\t\n" +
				"\t@Override\n" +
				"\tpublic boolean checkConstraint(Collection<Resource> r)\n" +
				"\t{\n";
		for (VariableDescription var : model.variables) {
			java += var.getJavaCodeUsage(2) + "\n";
		}
		java += "\t\tCollection<Resource> set = r.stream().filter(x -> x.getClass().equals(this.getResourceClass()) ).collect(Collectors.toCollection(ArrayList::new));\n" +
				"\t\treturn ( set.size() >= " + from.getJavaCode(false, 0, model) + " && set.size() <= " + to.getJavaCode(false, 0, model) + " );\n" +

				"\t}\n" +
				"\t@Override\n" +
				"\tpublic double removeCost(Resource r) {\n";

		for (VariableDescription var : model.variables) {
			java += var.getJavaCodeUsage(2) + "\n";
		}
		java +=	"\t\ttry{\n" +
				"\t\t\treturn 1.0*" + remove_cost.getJavaCode(false, 0, model) + ";\n" +
				"\t\t}catch(Exception e){\n" +
				"\t\t\treturn Double.NaN;\n" +
				"\t\t}\n" +
				"\t}" +
				"}";
		return java;
	}
	
}
